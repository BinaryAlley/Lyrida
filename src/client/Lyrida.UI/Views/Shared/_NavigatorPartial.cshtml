@using Lyrida.Infrastructure.Common.Enums;
@using Lyrida.Infrastructure.Localization;
@inject ITranslationService translationService;

<div id="navigationControlsGroup">
    <div id="navigatorHistory">
        <img src="~/images/ui/previous.svg" id="btnNavigateBack" title="@translationService.Translate(Terms.Back)" alt="@translationService.Translate(Terms.Back)" />
        <img src="~/images/ui/next.svg" id="btnNavigateForward" title="@translationService.Translate(Terms.Forward)" alt="@translationService.Translate(Terms.Forward)" />
        <img src="~/images/ui/up.svg" id="btnUpOneLevel" title="@translationService.Translate(Terms.UpOneLevel)" alt="@translationService.Translate(Terms.UpOneLevel)" />
    </div>
    <img src="~/images/ui/tree-view.svg" id="btnTreeView" alt="Tree view" title="Tree view" class="icon" />
    <img src="~/images/ui/preview.svg" id="btnPreview" alt="Preview" title="Preview" class="icon" />
    <img src="~/images/ui/split-view.svg" id="btnSplitView" alt="Split view" title="Split view" class="icon" />
</div>
<div id="navigationMiscellaneousGroup">
    <div id="selectionIconContainer">
        <img src="~/images/ui/select.svg" id="btnSelection" alt="@translationService.Translate(Terms.Selection)" title="@translationService.Translate(Terms.Selection)" class="icon" />
        <div id="selectionDropdown" class="hidden">
            <div id="selectionDropdownArrow"></div>
            <ul>            
                <li>
                    <a id="btnSelectionMode" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/select.svg" alt="@translationService.Translate(Terms.SelectionMode)" title="@translationService.Translate(Terms.SelectionMode)" class="icon" />
                        <span>@translationService.Translate(Terms.SelectionMode)</span>
                    </a>
                </li>
                <li>
                    <a id="btnSelectAll" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/select-all.svg" alt="@translationService.Translate(Terms.SelectAll)" title="@translationService.Translate(Terms.SelectAll)" class="icon" />
                        <span>@translationService.Translate(Terms.SelectAll)</span>
                    </a>
                </li>
                <li>
                    <a id="btnSelectNone" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/select-none.svg" alt="@translationService.Translate(Terms.SelectNone)" title="@translationService.Translate(Terms.SelectNone)" class="icon" />
                        <span>@translationService.Translate(Terms.SelectNone)</span>
                    </a>
                </li>
                <li>
                    <a id="btnSelectInverse" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/select-invert.svg" alt="@translationService.Translate(Terms.SelectInverse)" title="@translationService.Translate(Terms.SelectInverse)" class="icon" />
                        <span>@translationService.Translate(Terms.SelectInverse)</span>
                    </a>
                </li>
            </ul>
        </div>
    </div>
    <div id="actionsIconContainer">
        <img src="~/images/ui/actions.svg" id="btnActions" alt="@translationService.Translate(Terms.Actions)" title="@translationService.Translate(Terms.Actions)" class="icon" />
        <div id="actionsDropdown" class="hidden">
            <div id="actionsDropdownArrow"></div>
            <ul>
                <li>
                    <a id="btnCut" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/cut.svg" alt="@translationService.Translate(Terms.Cut)" title="@translationService.Translate(Terms.Cut)" class="icon" /> 
                        <span>@translationService.Translate(Terms.Cut)</span>
                    </a>
                </li>
                <li>
                    <a id="btnCopy" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/copy.svg" alt="@translationService.Translate(Terms.Copy)" title="@translationService.Translate(Terms.Copy)" class="icon" />
                        <span>@translationService.Translate(Terms.Copy)</span>
                    </a>
                </li>
                <li>
                    <a id="btnPaste" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/paste.svg" alt="@translationService.Translate(Terms.Paste)" title="@translationService.Translate(Terms.Paste)" class="icon" />
                        <span>@translationService.Translate(Terms.Paste)</span>
                    </a>
                </li>
                <li>
                    <a id="btnDelete" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/delete.svg" alt="@translationService.Translate(Terms.Delete)" title="@translationService.Translate(Terms.Delete)" class="icon" />
                        <span>@translationService.Translate(Terms.Delete)</span>
                    </a>
                </li>
                <li>
                    <a id="btnRename" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/rename.svg" alt="@translationService.Translate(Terms.Rename)" title="@translationService.Translate(Terms.Rename)" class="icon" />
                        <span>@translationService.Translate(Terms.Rename)</span>
                    </a>
                </li>
                <li>
                    <a id="btnNewDirectory" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/new-directory.svg" alt="@translationService.Translate(Terms.NewDirectory)" title="@translationService.Translate(Terms.NewDirectory)" class="icon" />
                        <span>@translationService.Translate(Terms.NewDirectory)</span>
                    </a>
                </li>
                <li>
                    <a id="btnNewFile" class="menu-link text-light-one" href="#">
                        <img src="~/images/ui/new-file.svg" alt="@translationService.Translate(Terms.NewTestFile)" title="@translationService.Translate(Terms.NewTestFile)" class="icon" />
                        <span>@translationService.Translate(Terms.NewTestFile)</span>
                    </a>
                </li>
            </ul>
        </div>
    </div>
</div>
<div id="addressBarGroup">
    <div id="navigator">
        <input type="text" class="enlightenment-input" id="addressBarInput" />

        <div style="flex: 0 0 50px; margin-top: 2px;">
            <div class="enlightenment-combobox inline-block" id="environmentsCombobox">
                <div class="shine-effect" style="top: 1px;"></div>
                <input type="checkbox" id="environmentsDropdownToggle" class="enlightenment-toggle-checkbox" />
                <label class="enlightenment-toggle" for="environmentsDropdownToggle" style="padding: 0 13px 0px 16px; background-position: right 0px top 50%, left 7px top 50%, 0 0; background-size: 0px 0px, 3px auto, 100%;">
                    <img src="~/images/ui/os.svg" id="imgPlatformPlaceholder" alt="@translationService.Translate(Terms.SelectAPlatform)" title="@translationService.Translate(Terms.SelectAPlatform)" data-default-text="@translationService.Translate(Terms.SelectAPlatform)" style="width: 23px;">
                </label>
                <div class="enlightenment-dropdown" id="environmentsDropdown">
                    <div class="shine-effect" style="top: -4px;"></div>
                </div>
            </div>
        </div>

        <div id="addressBar">
            <ul id="pathSegments"></ul>
        </div>
    </div>
    <button id="btnEditPath" type="submit" class="abort-button">
        <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path style="fill:#009BFC;fill-opacity:1;stroke:none"
                  d="m22.27 4l-18.27 18.27v5.73h5.73c0 0 18.269-18.269 18.27-18.27zm-2.865 4.299l4.297 4.297-11.701 11.703v-2.299h-4v-2.299zm-12.404 12.402v2.299h4v2.299l-1.701 1.701h-2l-2.297-2.297v-2z"/>
        </svg>
    </button>
    <button id="btnNavigate" type="submit" class="confirm-button">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M20 6L9 17L4 12" stroke="#0F9D58" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
    </button>
</div>

<script type="text/javascript">
    $(function () {
        shortcut.add("Ctrl+a", function () {
            $('#btnSelectAll').click();
        }, {
            'disable_in_input': true
        });
        shortcut.add("Ctrl+x", function () {
            $('#btnCut').click();
        }, {
            'disable_in_input': true
        });
        shortcut.add("Ctrl+c", function () {
            $('#btnCopy').click();
        }, {
            'disable_in_input': true
        });
        shortcut.add("Ctrl+v", function () {
            $('#btnPaste').click();
        }, {
            'disable_in_input': true
        });
        shortcut.add("Ctrl+F10", function () {
            $('#btnNewDirectory').click();
        });
        shortcut.add("Ctrl+F2", function () {
            const explorer = getActiveExplorer();
            if (explorer) {
                const selectedItems = explorer.querySelectorAll('.e.selected');
                if (selectedItems.length === 1)
                    enterRenameMode(selectedItems[0]);
            }
        });
        shortcut.add("Delete", function () {
            $('#btnDelete').click();
        }, {
            'disable_in_input': true
        });
        $('#btnUpOneLevel').click(function (event) {
            if (Object.keys(environmentTypes).length === 0) {
                Swal.fire({
                    title: 'STOP!', icon: 'error', buttonsStyling: false, text: '@translationService.Translate(Terms.AddDataSourceFirst)', confirmButtonText: 'OK',
                    customClass: { popup: 'colored-toast', confirmButton: 'confirm-button f-18 h-24px pl-10 pr-10' }, heightAuto: false
                });
            }
            else
                goUpOneLevel();
        });
        $('#addressBarInput').keydown(function (event) {
            //event.preventDefault();  
            if (event.key === 'Escape') {
                addressBarInput.style.display = 'none'; // hide #addressBarInput
                addressBar.style.display = 'block'; // show #addressBar
            } else if (event.key === 'Enter') {
                if (Object.keys(environmentTypes).length === 0) {
                    Swal.fire({
                        title: 'STOP!', icon: 'error', buttonsStyling: false, text: '@translationService.Translate(Terms.AddDataSourceFirst)', confirmButtonText: 'OK',
                        customClass: { popup: 'colored-toast', confirmButton: 'confirm-button f-18 h-24px pl-10 pr-10' }, heightAuto: false
                    });
                }
                else
                    parsePath(true, false, false);
            }
        });
        $('#btnNavigate').click(function (event) {
            if (Object.keys(environmentTypes).length === 0) {
                Swal.fire({
                    title: 'STOP!', icon: 'error', buttonsStyling: false, text: '@translationService.Translate(Terms.AddDataSourceFirst)', confirmButtonText: 'OK',
                    customClass: { popup: 'colored-toast', confirmButton: 'confirm-button f-18 h-24px pl-10 pr-10' }, heightAuto: false
                });
            }
            else
                parsePath(true, false, false);
            addressBarInput.style.display = 'none';
            addressBar.style.display = 'block';
        });
        $('#btnSelectionMode').click(function (event) {
            var selectImagePath = '@Url.Content("~/images/ui/select.svg")';
            var normalImagePath = '@Url.Content("~/images/ui/cursor.svg")';
            if (isSelectionMode) {
                $(this).find('span').text('@translationService.Translate(Terms.NormalMode)');
                $(this).find('img').attr('src', normalImagePath);
                $(this).find('img').attr('title', '@translationService.Translate(Terms.NormalMode)');
                $(this).find('img').attr('alt', '@translationService.Translate(Terms.NormalMode)');
            }
            else { 
                $(this).find('span').text('@translationService.Translate(Terms.SelectionMode)');
                $(this).find('img').attr('src', selectImagePath);
                $(this).find('img').attr('title', '@translationService.Translate(Terms.SelectionMode)');
                $(this).find('img').attr('alt', '@translationService.Translate(Terms.SelectionMode)');
            }
        });
        $('#btnSelectAll').click(function (event) {
            const explorer = getActiveExplorer();
            if (explorer) {
                // go through each .e item and mark it as selected
                explorer.querySelectorAll('.e').forEach(item => {
                    item.classList.add('selected');
                    item.classList.remove('selectionHover');
                });
            }
            selectionDropdown.classList.add('hidden');
            event.preventDefault();
            event.stopPropagation();
        });

        $('#btnCut').click(function (event) {
            const explorer = getActiveExplorer();
            if (explorer) {
                // make sure there are selected elements
                const selectedItems = explorer.querySelectorAll('.e.selected');
                if (selectedItems.length > 0) 
                    cutElements(selectedItems);
                else {
                    const Toast = swal.mixin({
                        toast: true,
                        position: 'bottom-left',
                        iconColor: 'red',
                        customClass: {
                            popup: 'colored-toast'
                        },
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'error',
                        title: '@translationService.Translate(Terms.NoFilesSelected)'
                    });
                }
            } else {
                const Toast = swal.mixin({
                    toast: true,
                    position: 'bottom-left',
                    iconColor: 'red',
                    customClass: {
                        popup: 'colored-toast'
                    },
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: '@translationService.Translate(Terms.NavigateToALocationFirst)'
                });
            }
            actionsDropdown.classList.add('hidden');
            event.preventDefault();
            event.stopPropagation();
        });
        $('#btnCopy').click(function (event) {
            const explorer = getActiveExplorer();
            if (explorer) {
                // make sure there are selected elements
                const selectedItems = explorer.querySelectorAll('.e.selected');
                if (selectedItems.length > 0)
                    copyElements(selectedItems);
                else {
                    const Toast = swal.mixin({
                        toast: true,
                        position: 'bottom-left',
                        iconColor: 'red',
                        customClass: {
                            popup: 'colored-toast'
                        },
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'error',
                        title: '@translationService.Translate(Terms.NoFilesSelected)'
                    });
                }
            } else {
                const Toast = swal.mixin({
                    toast: true,
                    position: 'bottom-left',
                    iconColor: 'red',
                    customClass: {
                        popup: 'colored-toast'
                    },
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: '@translationService.Translate(Terms.NavigateToALocationFirst)'
                });
            }
            actionsDropdown.classList.add('hidden');
            event.preventDefault();
            event.stopPropagation();
        });
        $('#btnPaste').click(function (event) {
            if (clipboard.length > 0)
                pasteElements();
            else {
                const Toast = swal.mixin({
                    toast: true,
                    position: 'bottom-left',
                    iconColor: 'red',
                    customClass: {
                        popup: 'colored-toast'
                    },
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: '@translationService.Translate(Terms.NoFilesCopied)'
                });
            }
            actionsDropdown.classList.add('hidden');
            event.preventDefault();
            event.stopPropagation();
        });
        $('#btnDelete').click(function (event) {
            const explorer = getActiveExplorer();
            if (explorer) {
                // make sure there are selected elements
                const selectedItems = explorer.querySelectorAll('.e.selected');
                if (selectedItems.length > 0)
                {
                    Swal.fire({
                        title: '@translationService.Translate(Terms.PleaseTypeDelete)',
                        input: "text",
                        buttonsStyling: false,
                        heightAuto: false,
                        customClass: {
                            popup: 'colored-toast text-light-one',
                            input: 'enlightenment-input',
                            validationMessage: 'text-light-three transparent',
                            confirmButton: 'confirm-button f-18 h-24px pl-10 pr-10 mr-10',
                            cancelButton: 'abort-button f-18 h-24px pl-10 pr-10',
                        },
                        showCancelButton: true,
                        confirmButtonText: '@translationService.Translate(Terms.Confirm)',
                        cancelButtonText: '@translationService.Translate(Terms.Cancel)',
                        inputValidator: (value) => { // ask user to type confirmation
                            if (!value) 
                                return '@translationService.Translate(Terms.YouNeedToWriteSomething)';
                            else if (value.toLowerCase() !== "delete")
                                return '@translationService.Translate(Terms.YouMustTypeDelete)';
                            else
                                deleteElements(selectedItems);
                        }
                    });
                } else {
                    const Toast = swal.mixin({
                        toast: true,
                        position: 'bottom-left',
                        iconColor: 'red',
                        customClass: {
                            popup: 'colored-toast'
                        },
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'error',
                        title: '@translationService.Translate(Terms.NoFilesSelected)'
                    });
                }
            } else {
                const toast = swal.mixin({
                    toast: true,
                    position: 'bottom-left',
                    iconColor: 'red',
                    customClass: {
                        popup: 'colored-toast'
                    },
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                toast.fire({
                    icon: 'error',
                    title: '@translationService.Translate(Terms.NavigateToALocationFirst)'
                });
            }
            actionsDropdown.classList.add('hidden');
            event.preventDefault();
            event.stopPropagation();
        });
        $('#btnNewDirectory').click(function (event) {
            const explorer = getActiveExplorer();
            if (explorer) {
                Swal.fire({
                    title: '@translationService.Translate(Terms.EnterNewDirectoryName)',
                    input: "text",
                    buttonsStyling: false,
                    heightAuto: false,
                    customClass: {
                        popup: 'colored-toast text-light-one',
                        input: 'enlightenment-input',
                        validationMessage: 'text-light-three transparent',
                        confirmButton: 'confirm-button f-18 h-24px pl-10 pr-10 mr-10',
                        cancelButton: 'abort-button f-18 h-24px pl-10 pr-10',
                    },
                    showCancelButton: true,
                    confirmButtonText: '@translationService.Translate(Terms.Confirm)',
                    cancelButtonText: '@translationService.Translate(Terms.Cancel)',
                    inputValidator: (value) => { // ask user to type confirmation
                        if (!value)
                            return '@translationService.Translate(Terms.YouNeedToWriteSomething)';
                        else
                            createNewDirectory(explorer, explorer.getAttribute('data-path'), value);
                    }
                });                
            } else {
                const Toast = swal.mixin({
                    toast: true,
                    position: 'bottom-left',
                    iconColor: 'red',
                    customClass: {
                        popup: 'colored-toast'
                    },
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: '@translationService.Translate(Terms.NavigateToALocationFirst)'
                });
            }
            actionsDropdown.classList.add('hidden');
            event.preventDefault();
            event.stopPropagation();
        });
        $('#btnRename').click(function (event) {
            const explorer = getActiveExplorer();
            if (explorer) {
                const selectedItems = explorer.querySelectorAll('.e.selected');
                if (selectedItems.length === 1)
                    enterRenameMode(selectedItems[0]);
            }
            else {
                const Toast = swal.mixin({
                    toast: true,
                    position: 'bottom-left',
                    iconColor: 'red',
                    customClass: {
                        popup: 'colored-toast'
                    },
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: '@translationService.Translate(Terms.NavigateToALocationFirst)'
                });
            }
            actionsDropdown.classList.add('hidden');
            event.preventDefault();
            event.stopPropagation();
        });
    });
</script>