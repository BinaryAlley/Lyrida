@using Newtonsoft.Json;
@using Lyrida.UI.Common.DTO.FileSystem;
@using Lyrida.Infrastructure.Common.Enums;
@using Lyrida.Infrastructure.Localization;
@using Lyrida.UI.Common.DTO.Configuration;
@inject ITranslationService translationService
@{
    @if (ViewData["Environments"] is FileSystemDataSourceDto[] dataSources)
    {
        foreach (FileSystemDataSourceDto dataSource in dataSources)
        {
            <script>
                $(document).ready(() => {
                    window.environmentTypes['@dataSource.EnvironmentId'] = {
                        environmentId: '@dataSource.EnvironmentId',
                        type: '@dataSource.Type',
                        title: '@dataSource.Title',
                        initialPath: '@dataSource.InitialPath',
                        platformType: '@dataSource.PlatformType',
                        url: @Html.Raw(dataSource?.Url != null ? $"'{dataSource.Url}'" : "null"),
                        port: @Html.Raw(dataSource?.Port != null ? $"{dataSource.Port}" : "null"),
                        username: @Html.Raw(dataSource?.Username != null ? $"'{dataSource.Username}'" : "null"),
                        password: @Html.Raw(dataSource?.Password != null ? $"'{dataSource.Password}'" : "null"),
                        passiveMode: @Html.Raw(dataSource?.PassiveMode != null ? $"'{dataSource.PassiveMode.ToString()!.ToLower()}'" : "null")
                    };
                });
            </script>
        }
    }
    if (ViewData["Preferences"] is ProfilePreferencesDto profilePreference)
    {
        <script>
            let nextTabId = 0;
            $(document).ready(() => {
                @if (profilePreference.RememberOpenTabs)
                {
                    if (ViewData["InitialPages"] is PageDto[] initialPages)// TODO: "remember" view mode for each tab (if enabled as user preference)
                    {
                        for (int i = 0; i < initialPages.Length; i++)
                        {
                            var title = Json.Serialize(initialPages[i].Title);
                            var path = Json.Serialize(initialPages[i].Path);
                            var environmentId = Json.Serialize(initialPages[i].EnvironmentId);
                            var pageId = Json.Serialize(initialPages[i].PageId);
                            <text>
                                addNewTab(@title, @path, @environmentId, @pageId);
                            </text>
                        }
                    }
                }
                showThumbnails = @profilePreference.ShowImagePreviews.ToString().ToLower();
                imagePreviewsQuality = @profilePreference.ImagePreviewsQuality.ToString().ToLower();
                fullImageQuality = @profilePreference.FullImageQuality.ToString().ToLower();
                rememberOpenTabs = @profilePreference.RememberOpenTabs.ToString().ToLower();
                inspectFileForThumbnails = @profilePreference.InspectFileForThumbnails.ToString().ToLower();
                enableConsoleDebugMessages = @profilePreference.EnableConsoleDebugMessages.ToString().ToLower();
                scrollThumbnailRetrievalTimeout = @profilePreference.ScrollThumbnailRetrievalTimeout.ToString().ToLower();
                thumbnailsRetrievalBatchSize = @profilePreference.ThumbnailsRetrievalBatchSize.ToString().ToLower();
                // let USE_2FA = @profilePreference.Use2fa.ToString().ToLower();
            });
        </script>
    }
}
<div class="dynTab-container">
    <ul class="dynTab-tabs dynTab-clearfix" id="dynTab_tabHeaders">
        <!-- tabs will be populated dynamically here -->
        <li id="dynTab_addTab">
            <a href="#" title="Add Tab">+</a>
        </li>
    </ul>
</div>
<div id="dynTab_tabPages"></div>
<div id="visibleSelectionRectangle"></div>
<div id="selectionRectangle"></div>
<input id="renameInput" type="text" class="enlightenment-input hidden">

<div id="dropContextMenu" class="enlightenment-dropdown hidden" style="position: absolute; top: 31.5px; left: 421px; display: block; width: 154px;">
    <div class="shine-effect" style="top: -4px;"></div>
    <div id="btnMenuCopy" class="enlightenment-option" style="padding: 0px;">
        <img src="~/images/ui/copy.svg" alt="@translationService.Translate(Terms.CopyHere)" title="@translationService.Translate(Terms.CopyHere)" class="icon" style="display: inline-block; vertical-align: middle;">
        <span>@translationService.Translate(Terms.CopyHere)</span>
    </div>
    <div id="btnMenuMove" class="enlightenment-option" style="padding: 0px;">
        <img src="~/images/ui/move.svg" alt="@translationService.Translate(Terms.MoveHere)" title="@translationService.Translate(Terms.MoveHere)" class="icon" style="display: inline-block; vertical-align: middle;">
        <span>@translationService.Translate(Terms.MoveHere)</span>
    </div>
    <div id="btnMenuLink" class="enlightenment-option" style="padding: 0px;">
        <img src="~/images/ui/link.svg" alt="@translationService.Translate(Terms.LinkHere)" title="@translationService.Translate(Terms.LinkHere)" class="icon" style="display: inline-block; vertical-align: middle;">
        <span>@translationService.Translate(Terms.LinkHere)</span>
    </div>
</div>
@section Scripts {
    @if (ViewData["error"] is not null)
    {
        <script type="text/javascript">
            Swal.fire({
                title: 'STOP!', icon: 'error', buttonsStyling: false, text: '@Html.Raw(ViewData["error"])', confirmButtonText: 'OK',
                customClass: { popup: 'colored-toast', confirmButton: 'confirm-button f-18 h-24px pl-10 pr-10' }, heightAuto: false
            });
        </script>
    }
    else
    {
        <script type="text/javascript">
            $('#dynTab_addTab').click((e) => {
                e.preventDefault();
                activeEnvironmentId = '';
                if (Object.keys(environmentTypes).length === 0) {
                    Swal.fire({
                        title: 'STOP!', icon: 'error', buttonsStyling: false, text: '@translationService.Translate(Terms.AddDataSourceFirst)', confirmButtonText: 'OK',
                        customClass: { popup: 'colored-toast', confirmButton: 'confirm-button f-18 h-24px pl-10 pr-10' }, heightAuto: false
                    });
                }
                else
                    addNewTab("New Tab", null, null, null);
                e.stopPropagation();
            });
            $('#renameInput').on('blur', function () {
                renameInput.classList.add('hidden');
                if (!isEscapePressed) {
                    const explorer = getActiveExplorer();
                    if (explorer) {
                        // there should be one item selected
                        const selectedItems = explorer.querySelectorAll('.e.selected');
                        if (selectedItems.length > 0)
                            renameFileSystemElement(selectedItems[0], renameInput.value);
                    }
                }
                isEscapePressed = false;
            });
            $('#btnMenuCopy').click(function (event) {
                clipboard = [];
                dropContextMenu.classList.add('hidden');
                draggedItems.forEach(element => {
                    clipboard.push({ path: element.path, name: element.name, type: element.type, action: "copy" });
                });
                document.querySelectorAll('.e').forEach(element => { // unmark items as "cut"
                    element.classList.remove('cut');
                });
                pasteElements();
                draggedItems = [];
                event.preventDefault();
                event.stopPropagation();
            });
            $('#btnMenuMove').click(function (event) {
                clipboard = [];
                dropContextMenu.classList.add('hidden');
                document.querySelectorAll('.e').forEach(element => { // unmark items as "cut"
                    element.classList.remove('cut');
                });
                draggedItems.forEach(element => {
                    clipboard.push({ path: element.path, name: element.name, type: element.type, action: "cut" });
                });
                pasteElements();
                draggedItems = [];
                event.preventDefault();
                event.stopPropagation();
            });
            $('#btnMenuLink').click(function (event) {
                Swal.fire({
                    title: 'STOP!', icon: 'error', buttonsStyling: false, text: "Not yet implemented!", confirmButtonText: 'OK',
                    customClass: { popup: 'colored-toast', confirmButton: 'confirm-button f-18 h-24px pl-10 pr-10' }, heightAuto: false
                });
                dropContextMenu.classList.add('hidden');
                draggedItems = [];
                event.preventDefault();
                event.stopPropagation();
            });
        </script>
    }
}