@inject ITranslationService translationService
@{
    ViewData["Title"] = @translationService.Translate(Terms.PasswordReset);
    string passwordErrorMessage = string.Empty;
    string passwordConfirmErrorMessage = string.Empty;
    string resetPasswordErrorMessage = string.Empty;
    string resetPasswordTokenErrorMessage = string.Empty;
    string? resetPasswordSuccessMessage = TempData["resetPasswordSuccess"] as string;
    // handle error messages sent with model validations
    if (!ViewData.ModelState.IsValid)
    {
        if (ViewData.ModelState.ContainsKey("password"))
            passwordErrorMessage = ViewData.ModelState["password"]!.Errors[0].ErrorMessage;
        if (ViewData.ModelState.ContainsKey("passwordConfirm"))
            passwordConfirmErrorMessage = ViewData.ModelState["passwordConfirm"]!.Errors[0].ErrorMessage;
    }
    // handle cases when model state is valid, but the password reset business rules are still not met, or when the token validation has not been performed
    if (ViewData.ModelState.ContainsKey("resetPasswordTokenError"))
        resetPasswordTokenErrorMessage = ViewData.ModelState["resetPasswordTokenError"]!.Errors[0].ErrorMessage;
    if (ViewData.ModelState.ContainsKey("resetPasswordError"))
        resetPasswordErrorMessage = ViewData.ModelState["resetPasswordError"]!.Errors[0].ErrorMessage;
    // when there are no errors, display a buton to return to login
    if (ViewData.ModelState.IsValid && string.IsNullOrEmpty(resetPasswordErrorMessage) && string.IsNullOrEmpty(resetPasswordTokenErrorMessage) && !string.IsNullOrEmpty(resetPasswordSuccessMessage))
    {
        <a id="redirectButton" asp-controller="Account" asp-action="Login" class="confirm-button f-14 pt-0 pb-0 h-22px mt-0 mb-0 mx-auto inline-block">@translationService.Translate(Terms.Login)</a>
    }
}

<div class="enlightenment-panel shadow-effect p-2 mx-auto panel w-30" style="min-width: 422px;">
    <div class="shine-effect"></div>
    @if (!string.IsNullOrEmpty(resetPasswordTokenErrorMessage))
    {
        <div class="text-center w-100">
            <p id="registerSuccess" class="invalid-feedback w-100">@resetPasswordTokenErrorMessage</p>
            <a id="redirectButton" asp-controller="Account" asp-action="Login" class="confirm-button f-14 pt-0 pb-0 h-22px mt-0 mb-0 mx-auto inline-block">@translationService.Translate(Terms.Login)</a>
        </div>
    }
    else
    {
        if (string.IsNullOrEmpty(resetPasswordSuccessMessage))
        {
            <form id="resetPasswordForm" method="post" action="@(!string.IsNullOrEmpty(Configuration["BASE_URL"]) ? Configuration["BASE_URL"] : "")/Account/ResetPassword">
                <input type="hidden" id="resetEmail" name="Email" value="@Model.Email"><!--should this be removed and email inferred from the token?-->
                <input type="hidden" name="token" value="@Model.Token" />
                <table class="w-100">
                    <!-- section password -->
                    <tr>
                        <td class="w-50">
                            <label for="resetPassword" class="text-light-one">@translationService.Translate(Terms.Password)</label>
                        </td>
                        <td class="w-50">
                            <input type="password" class="w-100 enlightenment-input" id="resetPassword" name="password" value="@Model.Password">
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <span id="resetPasswordError" class="invalid-feedback @(!string.IsNullOrEmpty(passwordErrorMessage) ? "inline" : "hidden")">@passwordErrorMessage</span>
                        </td>
                    </tr>
                    <!-- section password confirm -->
                    <tr>
                        <td class="w-50">
                            <label for="resetPasswordConfirm" class="text-light-one">@translationService.Translate(Terms.PasswordConfirm)</label>
                        </td>
                        <td class="w-50">
                            <input type="password" class="w-100 enlightenment-input" id="resetPasswordConfirm" name="passwordConfirm" value="@Model.PasswordConfirm">
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <span id="resetPasswordConfirmError" class="invalid-feedback @(!string.IsNullOrEmpty(passwordConfirmErrorMessage) ? "inline" : "hidden")">@passwordConfirmErrorMessage</span>
                        </td>
                    </tr>
                    <!-- section generic password reset errors -->
                    <tr>
                        <td colspan="2">
                            <span id="resetError" class="invalid-feedback @(!string.IsNullOrEmpty(resetPasswordErrorMessage) ? "inline" : "hidden")">@resetPasswordErrorMessage</span>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2" class="w-100 text-end">
                            <button type="submit" class="confirm-button f-14 h-24px pt-2 v-align-t">@translationService.Translate(Terms.ResetPassword)</button>
                        </td>
                    </tr>
                </table>
            </form>
        }
        <!-- section registration success -->
        <div class="text-center w-100">
            <p id="resetPasswordSuccess" class="text-light-one w-100 @(!string.IsNullOrEmpty(resetPasswordSuccessMessage) ? "block" : "hidden")">@translationService.Translate(Terms.PasswordHasBeenReset)</p>
            <a id="redirectButton" asp-controller="Account" asp-action="Login" class="confirm-button f-14 pt-0 pb-0 h-22px w-80px mt-10 mb-10 mx-auto @(!string.IsNullOrEmpty(resetPasswordSuccessMessage) ? "inline-block" : "hidden")">@translationService.Translate(Terms.Login)</a>
        </div>
    }
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $('#resetPasswordForm').on('submit', function (event) {
                event.preventDefault();
                var form = $(this);
                var url = form.attr('action');
                $.ajax({
                    type: "POST",
                    url: url,
                    data: form.serialize(),
                    success: function (data) {
                        const resetPasswordForm = $('#resetPasswordForm');
                        const resetPasswordError = $('#resetPasswordError');
                        const resetPasswordConfirmError = $('#resetPasswordConfirmError');
                        const redirectButton = $('#redirectButton');
                        const resetError = $('#resetError');
                        const resetPasswordSuccess = $('#resetPasswordSuccess');
                        resetPasswordError.removeClass('inline').addClass('hidden');
                        resetPasswordConfirmError.removeClass('inline').addClass('hidden');
                        resetError.removeClass('inline').addClass('hidden');
                        if (data.success) {
                            $('#resetPassword').val('');
                            $('#resetPasswordConfirm').val('');
                            resetError.removeClass('inline').addClass('hidden');
                            resetPasswordForm.removeClass('inline').addClass('hidden');
                            resetPasswordSuccess.removeClass('hidden').addClass('block');
                            redirectButton.removeClass('hidden').addClass('inline-block');
                        } else {
                            if (data.passwordConfirmError)
                                resetPasswordConfirmError.text(data.passwordConfirmError).removeClass('hidden').addClass('inline');
                            if (data.passwordError)
                                resetPasswordError.text(data.passwordError).removeClass('hidden').addClass('inline');
                            if (data.errorMessage)
                                resetError.text(data.errorMessage).removeClass('hidden').addClass('inline');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        swal("STOP!", textStatus + " " + errorThrown, "error", {
                            button: {
                                text: "OK",
                                className: "confirm-button",
                            }
                        });
                    }
                });
            });
        });
    </script>
}
